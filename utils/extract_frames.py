import os
import shutil
import asyncio
import argparse


# –ü–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
parser = argparse.ArgumentParser(description="üêì VideoFrameExtractor")

# –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
parser.add_argument(
    "directory",
    type=str,
    help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –≤–∏–¥–µ–æ-—Ñ–∞–π–ª–∞–º–∏ - remuxed/{directory}",
)

parser.add_argument(
    "frames",
    type=int,
    help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è",
)

# –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
args = parser.parse_args()

print("üêì VideoFrameExtractor\n")

# –û—á–∏—Å—Ç–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –æ—Ç —Ñ–∞–π–ª–æ–≤
if os.path.isdir(os.path.join("frames", args.directory)):
    shutil.rmtree(os.path.join("frames", args.directory))

# –°–æ–∑–¥–∞–¥–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
for directory in ["remuxed", "frames"]:
    if not os.path.isdir(os.path.join(directory, args.directory)):
        os.makedirs(os.path.join(directory, args.directory))

print(f"üöÄ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤ –∏–∑ 'remuxed/{args.directory}'...\n")

# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–∞
async def extract_frame(semaphore):
    async with semaphore:
        process = await asyncio.create_subprocess_exec(
            "python3",
            "extract_random_frame.py",
            args.directory,
        )

        await process.wait()


# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ asyncio
async def main():
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
    semaphore = asyncio.Semaphore(16)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏
    tasks = [asyncio.create_task(extract_frame(semaphore)) for _ in range(args.frames)]

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏
    await asyncio.gather(*tasks)


asyncio.run(main())

print("\nü•µ –ì–æ—Ç–æ–≤–æ! –û—Ö, —ç—Ç–æ –±—ã–ª–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ...")

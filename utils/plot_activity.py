import os
import numpy
import skimage
import datetime
import argparse
import matplotlib.pyplot


# –ü–∞—Ä—Å–µ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
parser = argparse.ArgumentParser(description="üêì ActivityPlot")

# –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
parser.add_argument(
    "directory",
    type=str,
    help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏/{directory}",
)

# –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
args = parser.parse_args()

print("üêì ActivityPlot\n")

# –°–æ–∑–¥–∞–¥–∏–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
if not os.path.isdir(os.path.join("processing", args.directory)):
    os.makedirs(os.path.join("processing", args.directory))

print(f"üöÄ –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω—ã—Ö 'procerssing/{args.directory}'...\n")

# –§–∞–π–ª —Å –¥–µ—Ç–µ–∫—Ü–∏—è–º–∏
filename = os.path.join("processing", args.directory, "detections.txt")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞
if not os.path.isfile(filename):
    print(f"üò° –§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç '{filename}'...\n")
    exit()

# –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
data = []

with open(filename, "r") as file:
    data = [int(row) for row in file.readlines()]

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –∏ —á–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤ –≤–∏–¥–µ–æ)
time_interval = 30
frames_per_second = 30

# –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø–æ—Ä—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –æ–∫–Ω—É
split_data = numpy.array_split(data, len(data) // (frames_per_second * time_interval))

# –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å—ä–µ–º–∫–∏
start_date_time = datetime.datetime(2023, 7, 30, 10, 30, 0)

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
split_data_timestamps = [
    start_date_time + datetime.timedelta(seconds=td * time_interval)
    for td in range(len(split_data))
]

# –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ—Ä—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
split_data_median = numpy.array([numpy.median(batch) for batch in split_data]) * 1.0
split_data_median_plus = numpy.array([numpy.max(batch) for batch in split_data]) * 1.0
split_data_median_minus = numpy.array([numpy.min(batch) for batch in split_data]) * 1.0

# –°–≥–ª–∞–∂–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–¥–∞
split_data_median = skimage.filters.gaussian(split_data_median, 2)
split_data_median_plus = skimage.filters.gaussian(split_data_median_plus, 2)
split_data_median_minus = skimage.filters.gaussian(split_data_median_minus, 2)

# –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
frames = len(data)
seconds = frames // 30
hours = seconds // 3600
minutes = (seconds % 3600) // 60
seconds = (seconds % 3600) % 60

fig, ax = matplotlib.pyplot.subplots(dpi=300, figsize=(20, 5))

ax.set_title(f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ç–∏—Ü—ã –∑–∞ {hours:02d}:{minutes:02d}:{seconds:02d}")
ax.set_ylabel("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
ax.set_xlabel("–í—Ä–µ–º—è")

ax.plot(
    split_data_timestamps,
    split_data_median,
    color="green",
)

ax.plot(
    split_data_timestamps,
    split_data_median_plus,
    color="red",
    alpha=0.25,
    linestyle="--",
)

ax.plot(
    split_data_timestamps,
    split_data_median_minus,
    color="blue",
    alpha=0.25,
    linestyle="--",
)

ax.fill_between(
    split_data_timestamps,
    split_data_median_plus,
    split_data_median_minus,
    color="blue",
    alpha=0.1,
)

ax.set_xlim([split_data_timestamps[0], split_data_timestamps[-1]])

ax.grid(linestyle=":")

ax.legend(
    [
        "–ú–µ–¥–∏–∞–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
        "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
    ],
    loc="upper right",
)

ax.xaxis.set_major_locator(matplotlib.ticker.MultipleLocator(1 / 24 / 2))
ax.xaxis.set_minor_locator(matplotlib.ticker.MultipleLocator(1 / 24 / 12))
ax.xaxis.set_major_formatter(matplotlib.dates.DateFormatter("%H:%M"))

matplotlib.pyplot.gcf().autofmt_xdate()

# –§–∞–π–ª —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
filename = os.path.join("processing", args.directory, "activity.png")

# –£–ø–ª–æ—Ç–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
fig.tight_layout()

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
fig.savefig(filename)

print(f"ü•µ –ì–æ—Ç–æ–≤–æ! –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—É—Ä–æ—á–µ–∫ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ñ–∞–π–ª–µ '{filename}'")
